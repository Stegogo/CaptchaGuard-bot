import asyncio
import random
from aiogram import types
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from asyncpg import Connection, Record
import commhandlers
import gettext

import data.config
from loader import bot, dp, db, _

lang = None
greet = None
protect = True
non_admin_text = _("–¢—ã –Ω–µ –∞–¥–º–∏–Ω –∏ –Ω–µ –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –º–µ–Ω—è!")

@dp.message_handler(commands="menu")
async def send_menu(message: types.Message):
    text = _(f"""
–ü—Ä–∏–≤–µ—Ç! üëã –Ø - CaptchaGuard, –∑–∞—â–∏—â–∞—é –≤–∞—à —á–∞—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–±–æ—Ç–æ–≤.\n
–í—ã –≤—ã–∑–≤–∞–ª–∏ –º–æ—ë –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.
–ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.\n
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/set_language: –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ üåç
/set_greeting: –°–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ‚≠êÔ∏è
/disable_captcha: –û—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–ø—á—É üîì
/enable_captcha: –í–∫–ª—é—á–∏—Ç—å –∫–∞–ø—á—É üîí""")
    await message.answer(text=text)

@dp.message_handler(commands="set_greeting")
async def set_greet_1(message: types.Message):
    tmp = await bot.get_chat_administrators(message.chat.id)
    admins = [x.user.id for x in tmp]
    if message.from_user.id in admins:
        text = _(f"""
–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω–∏ –ø—Ä–æ—à–ª–∏ –∫–∞–ø—á—É.
–ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞ –≤–∞—à–µ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.\n
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –≤–æ—Ç —Ç–∞–∫:
/set_new_greeting –ü—Ä–∏–≤–µ—Ç, $user, –º—ã —Ä–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!\n
–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:
/set_new_greeting -""")
        await message.answer(text=text)
    else:
        await message.answer(_(non_admin_text))

@dp.message_handler(commands=['set_new_greeting'])
async def set_greet_2(message: types.Message):
    tmp = await bot.get_chat_administrators(message.chat.id)
    admins = [x.user.id for x in tmp]
    if message.from_user.id in admins:
        arguments = message.get_args()
        if arguments == '-':
            await commhandlers.database.set_new_greeting(message.chat.id, " ")
        else:
            await commhandlers.database.set_new_greeting(message.chat.id, arguments)
        await message.answer(_("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ!"))
    else:
        await message.answer(_(non_admin_text))

@dp.message_handler(commands=['disable_captcha'])
async def set_captcha_1(message: types.Message):
    tmp = await bot.get_chat_administrators(message.chat.id)
    admins = [x.user.id for x in tmp]
    if message.from_user.id in admins:
        mode = await commhandlers.database.get_protect(message.chat.id)
        if mode == 'True':
            await commhandlers.database.set_new_protect(message.chat.id, "False")
            await message.answer(_("–ö–∞–ø—á–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞! üîì –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –µ—ë –æ–±—Ä–∞—Ç–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ /enable_captcha"))
        else:
            await message.answer(_("–ö–∞–ø—á–∞ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞! üîì"))
    else:
        await message.answer(_(non_admin_text))
@dp.message_handler(commands=['enable_captcha'])
async def set_captcha_2(message: types.Message):
    tmp = await bot.get_chat_administrators(message.chat.id)
    admins = [x.user.id for x in tmp]
    if message.from_user.id in admins:
        mode = await commhandlers.database.get_protect(message.chat.id)
        if mode == 'False':
            await commhandlers.database.set_new_protect(message.chat.id, "True")
            await message.answer(_("–ö–∞–ø—á–∞ –≤–∫–ª—é—á–µ–Ω–∞! üîí –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å –µ—ë, –≤–≤–µ–¥–∏—Ç–µ /disable_captcha"))
        else:
            await message.answer(_("–ö–∞–ø—á–∞ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞! üîí"))
    else:
        await message.answer(_(non_admin_text))
@dp.message_handler(commands=['set_language'])
async def set_language(message: types.Message):
    tmp = await bot.get_chat_administrators(message.chat.id)
    admins = [x.user.id for x in tmp]
    if message.from_user.id in admins:
        languages_markup = InlineKeyboardMarkup(
            inline_keyboard=
            [
                [
                    InlineKeyboardButton(text="English üá∫üá∏", callback_data="lang_en"),
                ],
                [
                    InlineKeyboardButton(text="–£–∫—Ä–∞—ó–Ω—å—Å–∫–∞ üá∫üá¶", callback_data="lang_uk"),
                    InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru")
                ]
            ]
        )
        msg = await message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"), reply_markup=languages_markup)
    else:
        await message.answer(_(non_admin_text))

@dp.callback_query_handler(text_contains="lang")
async def change_language(call: CallbackQuery):
    language = call.data[-2:]
    await commhandlers.database.set_new_lang(call.message.chat.id, language)
    await call.message.edit_reply_markup()
    await call.message.edit_text("‚úÖ")
